Mon 02 Dec 2024 09:28:17 IST

SLURM_JOBID:		 1662970
SLURM_JOB_NODELIST:	 cs-4090-10 


/home/alonkay/.conda/envs/alon_env/lib/python3.9/site-packages/transformers/utils/generic.py:260: FutureWarning: `torch.utils._pytree._register_pytree_node` is deprecated. Please use `torch.utils._pytree.register_pytree_node` instead.
  torch.utils._pytree._register_pytree_node(
/home/alonkay/.conda/envs/alon_env/lib/python3.9/site-packages/huggingface_hub/file_download.py:797: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
/home/alonkay/.conda/envs/alon_env/lib/python3.9/site-packages/transformers/modeling_utils.py:479: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(checkpoint_file, map_location=map_location)
/cs_storage/alonkay/Thesis/FMatrixRegressor.py:333: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(model_path, map_location='cpu')
###########################################################################################################################################################

 learning rate: 0.0001, mlp_hidden_sizes: [1024, 512], jump_frames: 6, use_reconstruction_layer: True
batch_size: 8, norm: True, train_seqeunces: [0, 2, 3, 5], val_sequences: [6, 7, 8], RL_TEST_NAMES: ['fe2fadf89a84e92a', 'f01e8b6f8e10fdd9', 'f1ee9dc6135e5307', 'a41df4fa06fd391b', 'bc0ebb7482f14795', '9bdd34e784c04e3a', '98ebee1c36ecec55'], dataset: Kitti2Sceneflow,
average embeddings: False, model: openai/clip-vit-base-patch32, augmentation: True, random crop: True, part: tail, get_old_path: False,
RE1 coeff: 0 SED coeff: 0.5, ALG_COEFF: 0, L2_coeff: 1, huber_coeff: 1, frozen layers: 0, trained vit: None,
crop: 224 resize: 256, use conv: True pretrained: None, train_size: 1, norm_mean: tensor([0.4815, 0.4578, 0.4082], device='cuda:0'), norm_std: tensor([0.2686, 0.2613, 0.2758], device='cuda:0'), sched: None seed: 42, 


train size: 1035, val size: 321, test size: 347


##### CONTINUE TRAINING #####


Epoch 7032/12000: Training Loss: 0.2665916736309345		 Val Loss: 0.8611979600859851
             	Training MAE: 0.056919943541288376		 Val MAE: 0.05680506303906441
             	Algebraic dist: 0.3238679739145132		 Val Algebraic dist: 0.4447651839837795
             	RE1 dist: 0.09817881217369666		 Val RE1 dist: 0.27556803168320076
             	SED dist: 0.47973697368915263		 Val SED dist: 1.6825261930140054



################
Empty points at treeflight_augmented0_x2



################
Empty points at eating_x2


Epoch 7033/12000: Training Loss: 0.28941001892089846		 Val Loss: 0.9946241611387672
             	Training MAE: 0.058338601142168045		 Val MAE: 0.06151970848441124
             	Algebraic dist: 0.3449311769925631		 Val Algebraic dist: 0.5234997446944074
             	RE1 dist: 0.10724449157714844		 Val RE1 dist: 0.32784022354498144
             	SED dist: 0.5249303377591646		 Val SED dist: 1.9423225216749238



################
Empty points at treeflight_augmented0_x2



################
Empty points at treeflight_augmented0_x2


Epoch 7034/12000: Training Loss: 0.26725818927471456		 Val Loss: 0.9397769090605945
             	Training MAE: 0.05816510692238808		 Val MAE: 0.05590004101395607
             	Algebraic dist: 0.32218225919283355		 Val Algebraic dist: 0.45010827227336603
             	RE1 dist: 0.09604859718909631		 Val RE1 dist: 0.3014408437217154
             	SED dist: 0.48029808631310095		 Val SED dist: 1.8374769629501715



################
Empty points at treeflight_augmented0_x2


Epoch 7035/12000: Training Loss: 0.21029708568866437		 Val Loss: 0.8711294778963414
             	Training MAE: 0.05788498744368553		 Val MAE: 0.053549591451883316
             	Algebraic dist: 0.27809002216045675		 Val Algebraic dist: 0.4211359721858327
             	RE1 dist: 0.07221285746647761		 Val RE1 dist: 0.27850623247100087
             	SED dist: 0.3668243701641376		 Val SED dist: 1.7068429342130336


